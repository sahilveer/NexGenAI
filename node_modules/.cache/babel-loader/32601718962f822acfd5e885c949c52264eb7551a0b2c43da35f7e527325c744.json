{"ast":null,"code":"import { Configuration, OpenAIApi } from 'openai';\n\n// Create a configuration object with your API key and optional organization ID\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n  // Make sure to set your API key here\n  organization: \"org-uyPhmlcBdVACdyyjXkC0xKPo\" // Optional: Set your organization ID if needed\n});\n\n// Create an instance of OpenAIApi with the configuration\nconst openai = new OpenAIApi(configuration);\nexport async function sendMsgToOpenAI(message) {\n  try {\n    const response = await openai.createCompletion({\n      model: 'text-davinci-003',\n      prompt: message,\n      max_tokens: 100 // Adjust max_tokens as needed\n    });\n\n    return response.data; // Return the response data\n  } catch (error) {\n    console.error('Error while sending message to OpenAI:', error);\n    throw error; // Optionally rethrow the error for further handling\n  }\n}","map":{"version":3,"names":["Configuration","OpenAIApi","configuration","apiKey","process","env","OPENAI_API_KEY","organization","openai","sendMsgToOpenAI","message","response","createCompletion","model","prompt","max_tokens","data","error","console"],"sources":["C:/Users/ksima/Downloads/NexGenAI/src/openai.js"],"sourcesContent":["import { Configuration, OpenAIApi } from 'openai';\r\n\r\n// Create a configuration object with your API key and optional organization ID\r\nconst configuration = new Configuration({\r\n    apiKey: process.env.OPENAI_API_KEY, // Make sure to set your API key here\r\n    organization: \"org-uyPhmlcBdVACdyyjXkC0xKPo\", // Optional: Set your organization ID if needed\r\n});\r\n\r\n// Create an instance of OpenAIApi with the configuration\r\nconst openai = new OpenAIApi(configuration);\r\n\r\nexport async function sendMsgToOpenAI(message) {\r\n    try {\r\n        const response = await openai.createCompletion({\r\n            model: 'text-davinci-003',\r\n            prompt: message,\r\n            max_tokens: 100, // Adjust max_tokens as needed\r\n        });\r\n        return response.data; // Return the response data\r\n    } catch (error) {\r\n        console.error('Error while sending message to OpenAI:', error);\r\n        throw error; // Optionally rethrow the error for further handling\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,SAAS,QAAQ,QAAQ;;AAEjD;AACA,MAAMC,aAAa,GAAG,IAAIF,aAAa,CAAC;EACpCG,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,cAAc;EAAE;EACpCC,YAAY,EAAE,8BAA8B,CAAE;AAClD,CAAC,CAAC;;AAEF;AACA,MAAMC,MAAM,GAAG,IAAIP,SAAS,CAACC,aAAa,CAAC;AAE3C,OAAO,eAAeO,eAAeA,CAACC,OAAO,EAAE;EAC3C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,MAAM,CAACI,gBAAgB,CAAC;MAC3CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAEJ,OAAO;MACfK,UAAU,EAAE,GAAG,CAAE;IACrB,CAAC,CAAC;;IACF,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}