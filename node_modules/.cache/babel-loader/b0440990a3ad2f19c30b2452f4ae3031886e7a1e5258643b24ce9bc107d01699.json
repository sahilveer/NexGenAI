{"ast":null,"code":"import axios from 'axios'; // Import Axios if not already imported\nimport { Configuration, OpenAIApi } from 'openai';\n\n// Create a configuration object with your API key and optional organization ID\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n  // Ensure this environment variable is set\n  organization: \"org-uyPhmlcBdVACdyyjXkC0xKPo\" // Optional\n});\n\n// Create an instance of OpenAIApi with the configuration\nconst apiKey = process.env.OPENAI_API_KEY;\nexport async function sendMsgToOpenAI(message) {\n  try {\n    // Make an OpenAI API call using Axios\n    const response = await axios.post('https://api.openai.com/v1/completions', {\n      model: 'text-davinci-003',\n      prompt: message,\n      // Use the provided message\n      temperature: 0.7,\n      max_tokens: 100\n    }, {\n      headers: {\n        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,\n        // Ensure API key is valid\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Log and return the response\n    console.log('OpenAI Response:', response.data);\n    return response.data.choices[0].text.trim(); // Return the generated text\n  } catch (error) {\n    console.error('Error communicating with OpenAI:', error.message);\n    throw error; // Rethrow the error for upstream handling\n  }\n}","map":{"version":3,"names":["axios","Configuration","OpenAIApi","configuration","apiKey","process","env","OPENAI_API_KEY","organization","sendMsgToOpenAI","message","response","post","model","prompt","temperature","max_tokens","headers","Authorization","console","log","data","choices","text","trim","error"],"sources":["C:/Users/ksima/Downloads/NexGenAI/src/openai.js"],"sourcesContent":["import axios from 'axios'; // Import Axios if not already imported\r\nimport { Configuration, OpenAIApi } from 'openai';\r\n\r\n// Create a configuration object with your API key and optional organization ID\r\nconst configuration = new Configuration({\r\n    apiKey: process.env.OPENAI_API_KEY, // Ensure this environment variable is set\r\n    organization: \"org-uyPhmlcBdVACdyyjXkC0xKPo\", // Optional\r\n});\r\n\r\n// Create an instance of OpenAIApi with the configuration\r\nconst apiKey = process.env.OPENAI_API_KEY;\r\n\r\nexport async function sendMsgToOpenAI(message) {\r\n    try {\r\n        // Make an OpenAI API call using Axios\r\n        const response = await axios.post(\r\n            'https://api.openai.com/v1/completions',\r\n            {\r\n                model: 'text-davinci-003',\r\n                prompt: message, // Use the provided message\r\n                temperature: 0.7,\r\n                max_tokens: 100,\r\n            },\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${process.env.OPENAI_API_KEY}`, // Ensure API key is valid\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            }\r\n        );\r\n\r\n        // Log and return the response\r\n        console.log('OpenAI Response:', response.data);\r\n        return response.data.choices[0].text.trim(); // Return the generated text\r\n    } catch (error) {\r\n        console.error('Error communicating with OpenAI:', error.message);\r\n        throw error; // Rethrow the error for upstream handling\r\n    }\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,SAASC,aAAa,EAAEC,SAAS,QAAQ,QAAQ;;AAEjD;AACA,MAAMC,aAAa,GAAG,IAAIF,aAAa,CAAC;EACpCG,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,cAAc;EAAE;EACpCC,YAAY,EAAE,8BAA8B,CAAE;AAClD,CAAC,CAAC;;AAEF;AACA,MAAMJ,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,cAAc;AAEzC,OAAO,eAAeE,eAAeA,CAACC,OAAO,EAAE;EAC3C,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAC7B,uCAAuC,EACvC;MACIC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAEJ,OAAO;MAAE;MACjBK,WAAW,EAAE,GAAG;MAChBC,UAAU,EAAE;IAChB,CAAC,EACD;MACIC,OAAO,EAAE;QACLC,aAAa,EAAG,UAASb,OAAO,CAACC,GAAG,CAACC,cAAe,EAAC;QAAE;QACvD,cAAc,EAAE;MACpB;IACJ,CACJ,CAAC;;IAED;IACAY,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAET,QAAQ,CAACU,IAAI,CAAC;IAC9C,OAAOV,QAAQ,CAACU,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;EACjD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZN,OAAO,CAACM,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAACf,OAAO,CAAC;IAChE,MAAMe,KAAK,CAAC,CAAC;EACjB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}